//
// PhoneAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PhoneAPI: APIBase {
    /**
     Agent answers queued call
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and is used to identify this unique call across API operations 
     - parameter agentIdentifier: (form) Identifier for the User object that answered the call. This will be matched against the following properties in order: &#x60;id&#x60;, &#x60;external_id&#x60;, &#x60;email&#x60;, &#x60;extension&#x60;. Failure to locate a valid &#x60;Users&#x60; object matching this identifier will result in a failure 
     - parameter autoReassign: (form) Optional flag (defaulting to &#x60;false&#x60; if omitted) indicating if the Issue for this call should be re-assigned if this is a subsequent call to &#x60;agentAnswer&#x60; (indicating that a second agent has taken over the call from the first agent, for example) (optional, default to false)
     - parameter logNotes: (form) Optional text to be added as a log entry on the issue, attributed to the agent identified by the &#x60;agent_identifier&#x60; parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentAnswer(externalId: String, agentIdentifier: String, autoReassign: Bool? = nil, logNotes: String? = nil, completion: @escaping ((_ data: PhoneResponse?, _ error: ErrorResponse?) -> Void)) {
        agentAnswerWithRequestBuilder(externalId: externalId, agentIdentifier: agentIdentifier, autoReassign: autoReassign, logNotes: logNotes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Agent answers queued call
     - POST /phone/agentAnswer
     - Trigger for indicating that an agent (represented by a Users object) answered a queued call (from a prior call to `queueEnter`) and is now handling the associated Issue. This will add the `User` to the call and assign the issue to that user if it is unassigned.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and is used to identify this unique call across API operations 
     - parameter agentIdentifier: (form) Identifier for the User object that answered the call. This will be matched against the following properties in order: &#x60;id&#x60;, &#x60;external_id&#x60;, &#x60;email&#x60;, &#x60;extension&#x60;. Failure to locate a valid &#x60;Users&#x60; object matching this identifier will result in a failure 
     - parameter autoReassign: (form) Optional flag (defaulting to &#x60;false&#x60; if omitted) indicating if the Issue for this call should be re-assigned if this is a subsequent call to &#x60;agentAnswer&#x60; (indicating that a second agent has taken over the call from the first agent, for example) (optional, default to false)
     - parameter logNotes: (form) Optional text to be added as a log entry on the issue, attributed to the agent identified by the &#x60;agent_identifier&#x60; parameter (optional)
     - returns: RequestBuilder<PhoneResponse> 
     */
    open class func agentAnswerWithRequestBuilder(externalId: String, agentIdentifier: String, autoReassign: Bool? = nil, logNotes: String? = nil) -> RequestBuilder<PhoneResponse> {
        let path = "/phone/agentAnswer"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "external_id": externalId,
            "agent_identifier": agentIdentifier,
            "auto_reassign": autoReassign,
            "log_notes": logNotes
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PhoneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Agent leaves call
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and is used to identify this unique call across API operations 
     - parameter agentIdentifier: (form) Identifier for the User object that answered the call. This will be matched against the following properties in order: &#x60;id&#x60;, &#x60;external_id&#x60;, &#x60;email&#x60;, &#x60;extension&#x60;. Failure to locate a valid &#x60;Users&#x60; object matching this identifier will result in a failure 
     - parameter autoResolve: (form) Optional flag (defaulting to &#x60;false&#x60;) indicating if the Issue for this call should be resolved (optional, default to false)
     - parameter logNotes: (form) Optional text to be added as a log entry on the issue, attributed to the agent identified by the &#x60;agent_identifier&#x60; parameter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func agentHangup(externalId: String, agentIdentifier: String, autoResolve: Bool? = nil, logNotes: String? = nil, completion: @escaping ((_ data: PhoneResponse?, _ error: ErrorResponse?) -> Void)) {
        agentHangupWithRequestBuilder(externalId: externalId, agentIdentifier: agentIdentifier, autoResolve: autoResolve, logNotes: logNotes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Agent leaves call
     - POST /phone/agentHangup
     - Trigger for indicating that an agent (represented by a Users object) left a queued call (from a prior call  to `queueEnter`) and is no longer handling the associated Issue. This will remove the User from the Call  object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and is used to identify this unique call across API operations 
     - parameter agentIdentifier: (form) Identifier for the User object that answered the call. This will be matched against the following properties in order: &#x60;id&#x60;, &#x60;external_id&#x60;, &#x60;email&#x60;, &#x60;extension&#x60;. Failure to locate a valid &#x60;Users&#x60; object matching this identifier will result in a failure 
     - parameter autoResolve: (form) Optional flag (defaulting to &#x60;false&#x60;) indicating if the Issue for this call should be resolved (optional, default to false)
     - parameter logNotes: (form) Optional text to be added as a log entry on the issue, attributed to the agent identified by the &#x60;agent_identifier&#x60; parameter (optional)
     - returns: RequestBuilder<PhoneResponse> 
     */
    open class func agentHangupWithRequestBuilder(externalId: String, agentIdentifier: String, autoResolve: Bool? = nil, logNotes: String? = nil) -> RequestBuilder<PhoneResponse> {
        let path = "/phone/agentHangup"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "external_id": externalId,
            "agent_identifier": agentIdentifier,
            "auto_resolve": autoResolve,
            "log_notes": logNotes
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PhoneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Customer enters call queue
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and will be used to identify all future API operations on this call. 
     - parameter cidNumber: (form) Phone number portion of Caller ID (CID) data, representing the phone number of the Customer who called into the queue. String will be parsed numerically against valid phone number syntax (E.G. [NANP format](https://en.wikipedia.org/wiki/North_American_Numbering_Plan)) 
     - parameter didNumber: (form) Dialed Direct Inward Dialing number (DID) on the phone system, indicating the line the customer dialed in to.  String will be parsed numerically against valid phone number syntax (E.G. [NANP format](https://en.wikipedia.org/wiki/North_American_Numbering_Plan)) 
     - parameter cidName: (form) Caller name portion of the Caller ID (CID) data, containing the caller&#39;s name (if present) (optional)
     - parameter qid: (form) Queue identifier on the phone system, for tracking which queue on the phone the user has entered (optional)
     - parameter searchObject: (form) Object to perform searching against for purpose of resolving an exisitng customer, required if sending search_query. Accepted values are customer, customer_location, &amp; customer_user. (optional)
     - parameter searchQuery: (form) Query to perform against the search_object for the purpose of resolving an existing customer. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queueEnter(externalId: String, cidNumber: String, didNumber: String, cidName: String? = nil, qid: String? = nil, searchObject: String? = nil, searchQuery: String? = nil, completion: @escaping ((_ data: QueueEnterResponse?, _ error: ErrorResponse?) -> Void)) {
        queueEnterWithRequestBuilder(externalId: externalId, cidNumber: cidNumber, didNumber: didNumber, cidName: cidName, qid: qid, searchObject: searchObject, searchQuery: searchQuery).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Customer enters call queue
     - POST /phone/queueEnter
     - Trigger for a Customer entering a phone system call queue, used to trigger the start of a call. This will match or create an Issue, Customer, Customer Location and Customer User.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and will be used to identify all future API operations on this call. 
     - parameter cidNumber: (form) Phone number portion of Caller ID (CID) data, representing the phone number of the Customer who called into the queue. String will be parsed numerically against valid phone number syntax (E.G. [NANP format](https://en.wikipedia.org/wiki/North_American_Numbering_Plan)) 
     - parameter didNumber: (form) Dialed Direct Inward Dialing number (DID) on the phone system, indicating the line the customer dialed in to.  String will be parsed numerically against valid phone number syntax (E.G. [NANP format](https://en.wikipedia.org/wiki/North_American_Numbering_Plan)) 
     - parameter cidName: (form) Caller name portion of the Caller ID (CID) data, containing the caller&#39;s name (if present) (optional)
     - parameter qid: (form) Queue identifier on the phone system, for tracking which queue on the phone the user has entered (optional)
     - parameter searchObject: (form) Object to perform searching against for purpose of resolving an exisitng customer, required if sending search_query. Accepted values are customer, customer_location, &amp; customer_user. (optional)
     - parameter searchQuery: (form) Query to perform against the search_object for the purpose of resolving an existing customer. (optional)
     - returns: RequestBuilder<QueueEnterResponse> 
     */
    open class func queueEnterWithRequestBuilder(externalId: String, cidNumber: String, didNumber: String, cidName: String? = nil, qid: String? = nil, searchObject: String? = nil, searchQuery: String? = nil) -> RequestBuilder<QueueEnterResponse> {
        let path = "/phone/queueEnter"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "external_id": externalId,
            "cid_number": cidNumber,
            "cid_name": cidName,
            "did_number": didNumber,
            "qid": qid,
            "search_object": searchObject,
            "search_query": searchQuery
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueEnterResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Customer leaves call
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and is used to identify this unique call across API operations 
     - parameter autoResolve: (form) Optional flag (defaulting to &#x60;false&#x60;) indicating if the Issue for this call should be resolved (optional, default to false)
     - parameter logNotes: (form) Optional text to be added as a log entry on the issue, posted as a system note (not attributed to any agent) (optional)
     - parameter recording: (form) Optional file to be attached to this call, representing recording of the call. Can be any file type, E.G. a &#x60;.wav&#x60; audio file, or a &#x60;.pdf&#x60; transcript from speech recognition / dictation software. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queueExit(externalId: String, autoResolve: Bool? = nil, logNotes: String? = nil, recording: URL? = nil, completion: @escaping ((_ data: PhoneResponse?, _ error: ErrorResponse?) -> Void)) {
        queueExitWithRequestBuilder(externalId: externalId, autoResolve: autoResolve, logNotes: logNotes, recording: recording).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Customer leaves call
     - POST /phone/queueExit
     - Trigger for the end of a queued call previously triggered from `queueEnter` representing that the caller has left the queue (by hanging up or being disconnected). This ends the Call object and updates it's duration.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (form) External identifier of this call on the phone system. This should be whatever unique ID is assigned internally to this call on the calling phone system, and is used to identify this unique call across API operations 
     - parameter autoResolve: (form) Optional flag (defaulting to &#x60;false&#x60;) indicating if the Issue for this call should be resolved (optional, default to false)
     - parameter logNotes: (form) Optional text to be added as a log entry on the issue, posted as a system note (not attributed to any agent) (optional)
     - parameter recording: (form) Optional file to be attached to this call, representing recording of the call. Can be any file type, E.G. a &#x60;.wav&#x60; audio file, or a &#x60;.pdf&#x60; transcript from speech recognition / dictation software. (optional)
     - returns: RequestBuilder<PhoneResponse> 
     */
    open class func queueExitWithRequestBuilder(externalId: String, autoResolve: Bool? = nil, logNotes: String? = nil, recording: URL? = nil) -> RequestBuilder<PhoneResponse> {
        let path = "/phone/queueExit"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "external_id": externalId,
            "auto_resolve": autoResolve,
            "log_notes": logNotes,
            "recording": recording
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PhoneResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
