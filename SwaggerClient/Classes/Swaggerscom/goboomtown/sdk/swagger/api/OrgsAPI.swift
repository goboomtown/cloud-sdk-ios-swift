//
// OrgsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class OrgsAPI: APIBase {
    /**
     Delete Org Team {team_id}
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgTeam(teamId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteOrgTeamWithRequestBuilder(teamId: teamId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete Org Team {team_id}
     - POST /orgs/team/delete/{team_id}
     - Deletes the *Org Team* object from this Org.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - parameter teamId: (path) The primary key of the OrgTeam 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgTeamWithRequestBuilder(teamId: String) -> RequestBuilder<Void> {
        var path = "/orgs/team/delete/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Org User {user_id}
     - parameter userId: (path) The primary key of the OrgUser 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrgUser(userId: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        deleteOrgUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Delete Org User {user_id}
     - POST /orgs/user/delete/{user_id}
     - Removes all team mappings, and deletes the *Org User* object from this Org.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - parameter userId: (path) The primary key of the OrgUser 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrgUserWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/orgs/user/delete/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get your Org
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrg(completion: @escaping ((_ data: OrgResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get your Org
     - GET /orgs/get
     - Returns a *Org* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<OrgResponse> 
     */
    open class func getOrgWithRequestBuilder() -> RequestBuilder<OrgResponse> {
        let path = "/orgs/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Customers for your Org
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgCustomers(completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgCustomersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Customers for your Org
     - GET /orgs/customers
     - Returns a paginated collection of *Customer* objects related to your *Org* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func getOrgCustomersWithRequestBuilder() -> RequestBuilder<CustomerResponse> {
        let path = "/orgs/customers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an Org Team
     - parameter orgTeamId: (path) The primary key of the OrgTeam 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgTeam(orgTeamId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgTeamWithRequestBuilder(orgTeamId: orgTeamId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an Org Team
     - GET /orgs/team/get/{org_team_id}
     - Returns a *Org Team* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter orgTeamId: (path) The primary key of the OrgTeam 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func getOrgTeamWithRequestBuilder(orgTeamId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/get/{org_team_id}"
        let orgTeamIdPreEscape = "\(orgTeamId)"
        let orgTeamIdPostEscape = orgTeamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org_team_id}", with: orgTeamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Status' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgTeamMetaStatuses(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgTeamMetaStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Status' dictionary for mapping keys to labels
     - GET /orgs/team/meta_statuses
     - Returns a dictionary for mapping 'Status' keys to labels on *Org Team* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getOrgTeamMetaStatusesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/orgs/team/meta_statuses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'TrainingType' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgTeamMetaTrainingTypes(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgTeamMetaTrainingTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'TrainingType' dictionary for mapping keys to labels
     - GET /orgs/team/meta_training_types
     - Returns a dictionary for mapping 'TrainingType' keys to labels on *Org Team* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getOrgTeamMetaTrainingTypesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/orgs/team/meta_training_types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Type' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgTeamMetaTypes(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgTeamMetaTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Type' dictionary for mapping keys to labels
     - GET /orgs/team/meta_types
     - Returns a dictionary for mapping 'Type' keys to labels on *Org Team* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getOrgTeamMetaTypesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/orgs/team/meta_types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of all Teams for your Org
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgTeams(completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgTeamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of all Teams for your Org
     - GET /orgs/team/list
     - Returns a paginated collection of *Org Team* objects related to your *Org* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func getOrgTeamsWithRequestBuilder() -> RequestBuilder<OrgTeamResponse> {
        let path = "/orgs/team/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Org User {user_id}
     - parameter userId: (path) The primary key of the OrgUser 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgUser(userId: String, completion: @escaping ((_ data: OrgUserResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Org User {user_id}
     - GET /orgs/user/get/{user_id}
     - Returns a *Org User* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter userId: (path) The primary key of the OrgUser 
     - returns: RequestBuilder<OrgUserResponse> 
     */
    open class func getOrgUserWithRequestBuilder(userId: String) -> RequestBuilder<OrgUserResponse> {
        var path = "/orgs/user/get/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Status' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgUserMetaStatuses(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgUserMetaStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Status' dictionary for mapping keys to labels
     - GET /orgs/users/meta_statuses
     - Returns a dictionary for mapping 'Status' keys to labels on *Org User* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getOrgUserMetaStatusesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/orgs/users/meta_statuses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Users for your Org
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrgUsers(completion: @escaping ((_ data: OrgUserResponse?, _ error: ErrorResponse?) -> Void)) {
        getOrgUsersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Users for your Org
     - GET /orgs/users
     - Returns a paginated collection of *Org User* objects related to your *Org* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<OrgUserResponse> 
     */
    open class func getOrgUsersWithRequestBuilder() -> RequestBuilder<OrgUserResponse> {
        let path = "/orgs/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Users for Team {team_id}
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamUsers(teamId: String, completion: @escaping ((_ data: OrgUserResponse?, _ error: ErrorResponse?) -> Void)) {
        getTeamUsersWithRequestBuilder(teamId: teamId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Users for Team {team_id}
     - GET /orgs/team/users/{team_id}
     - Returns a paginated collection of *Org User* objects related the specified *Team* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - returns: RequestBuilder<OrgUserResponse> 
     */
    open class func getTeamUsersWithRequestBuilder(teamId: String) -> RequestBuilder<OrgUserResponse> {
        var path = "/orgs/team/users/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a mapping between Customer {customer_id} and Org Team {team_id}
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter customerId: (query) The primary key of the Customer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mapTeamCustomer(teamId: String, customerId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        mapTeamCustomerWithRequestBuilder(teamId: teamId, customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a mapping between Customer {customer_id} and Org Team {team_id}
     - POST /orgs/team/map_customer/{team_id}
     - Returns a *Org Team* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter customerId: (query) The primary key of the Customer 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func mapTeamCustomerWithRequestBuilder(teamId: String, customerId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/map_customer/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customer_id": customerId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a mapping between Location and Org Team
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter customerId: (query) The primary key of the Customer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mapTeamCustomerLocation(teamId: String, customerId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        mapTeamCustomerLocationWithRequestBuilder(teamId: teamId, customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a mapping between Location and Org Team
     - POST /orgs/team/map_location/{team_id}
     - Adds a mapping between the `CustomerLocation` identified `{location_id}` and the Org Team identified by `{team_id}`. Returns the `OrgTeam` object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter customerId: (query) The primary key of the Customer 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func mapTeamCustomerLocationWithRequestBuilder(teamId: String, customerId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/map_location/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customer_id": customerId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a mapping between Org User {user_id} and Org Team {team_id}
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter userId: (query) The primary key of the OrgUser 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mapTeamUser(teamId: String, userId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        mapTeamUserWithRequestBuilder(teamId: teamId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Adds a mapping between Org User {user_id} and Org Team {team_id}
     - POST /orgs/team/map_user/{team_id}
     - Returns a *Org Team* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter userId: (query) The primary key of the OrgUser 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func mapTeamUserWithRequestBuilder(teamId: String, userId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/map_user/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an Org by external_id
     - parameter externalId: (query) The Org&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgLookupByExternalId(externalId: String, completion: @escaping ((_ data: OrgResponse?, _ error: ErrorResponse?) -> Void)) {
        orgLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an Org by external_id
     - GET /orgs/lookupByExternalId
     - Lookup an `Orgs` object by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The Org&#39;s external ID 
     - returns: RequestBuilder<OrgResponse> 
     */
    open class func orgLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<OrgResponse> {
        let path = "/orgs/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<OrgResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Team by external_id
     - parameter externalId: (query) The team&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgTeamLookupByExternalId(externalId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        orgTeamLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Team by external_id
     - GET /orgs/team/lookupByExternalId
     - Lookup an `OrgTeam` object by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The team&#39;s external ID 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func orgTeamLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<OrgTeamResponse> {
        let path = "/orgs/team/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an Org User by external_id
     - parameter externalId: (query) The User&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgUserLookupByExternalId(externalId: String, completion: @escaping ((_ data: OrgUserResponse?, _ error: ErrorResponse?) -> Void)) {
        orgUserLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an Org User by external_id
     - GET /orgs/user/lookupByExternalId
     - Lookup a `OrgsUsers` by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The User&#39;s external ID 
     - returns: RequestBuilder<OrgUserResponse> 
     */
    open class func orgUserLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<OrgUserResponse> {
        let path = "/orgs/user/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<OrgUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create/update a Team for this Org
     - parameter body: (body) The &#x60;OrgTeam&#x60; data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOrgTeam(body: OrgTeamCreateRequest, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        putOrgTeamWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create/update a Team for this Org
     - POST /orgs/team/put
     - Creates or updates, and returns, an `OrgTeam` object. To create a new team, supply the data for the new team in the request body with the `id` property set to `NULL` or omitted. To **update** an existing team, ensure the team ID to update is set in the `id` parameter of the request, and provide any other fields to update.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body) The &#x60;OrgTeam&#x60; data 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func putOrgTeamWithRequestBuilder(body: OrgTeamCreateRequest) -> RequestBuilder<OrgTeamResponse> {
        let path = "/orgs/team/put"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create/update a User for this Org
     - parameter body: (body) The *Org User* to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putOrgUser(body: OrgUserCreateRequest, completion: @escaping ((_ data: OrgUserResponse?, _ error: ErrorResponse?) -> Void)) {
        putOrgUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create/update a User for this Org
     - POST /orgs/users/put
     - Creates or updates, and returns, an *Org User* object. To create a new object, supply the data for the new object in the request body with the `id` property set to `NULL` or omitted. To **update** an existing entry, ensure the ID of the object to be updated is set in the `id` parameter of the request, and provide any other fields to update.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body) The *Org User* to create 
     - returns: RequestBuilder<OrgUserResponse> 
     */
    open class func putOrgUserWithRequestBuilder(body: OrgUserCreateRequest) -> RequestBuilder<OrgUserResponse> {
        let path = "/orgs/users/put"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Removes the mapping between Customer {customer_id} and Org Team {team_id}
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter customerId: (query) The primary key of the Customer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmapTeamCustomer(teamId: String, customerId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        unmapTeamCustomerWithRequestBuilder(teamId: teamId, customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Removes the mapping between Customer {customer_id} and Org Team {team_id}
     - POST /orgs/team/unmap_customer/{team_id}
     - Returns a *Org Team* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter customerId: (query) The primary key of the Customer 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func unmapTeamCustomerWithRequestBuilder(teamId: String, customerId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/unmap_customer/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customer_id": customerId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a mapping between Location and Org Team
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter locationId: (query) The primary key of the Customer Location 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmapTeamCustomerLocation(teamId: String, locationId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        unmapTeamCustomerLocationWithRequestBuilder(teamId: teamId, locationId: locationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Removes a mapping between Location and Org Team
     - POST /orgs/team/unmap_location/{team_id}
     - Removes a mapping between th `CustomerLocation` identified `{location_id}` and the Org Team identified by `{team_id}`. Returns the `OrgTeam` object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter locationId: (query) The primary key of the Customer Location 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func unmapTeamCustomerLocationWithRequestBuilder(teamId: String, locationId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/unmap_location/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "location_id": locationId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes the mapping between Org User {user_id} and Org Team {team_id}
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter userId: (query) The primary key of the OrgUser 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmapTeamUser(teamId: String, userId: String, completion: @escaping ((_ data: OrgTeamResponse?, _ error: ErrorResponse?) -> Void)) {
        unmapTeamUserWithRequestBuilder(teamId: teamId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Removes the mapping between Org User {user_id} and Org Team {team_id}
     - POST /orgs/team/unmap_user/{team_id}
     - Returns a *Org Team* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path) The primary key of the OrgTeam 
     - parameter userId: (query) The primary key of the OrgUser 
     - returns: RequestBuilder<OrgTeamResponse> 
     */
    open class func unmapTeamUserWithRequestBuilder(teamId: String, userId: String) -> RequestBuilder<OrgTeamResponse> {
        var path = "/orgs/team/unmap_user/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<OrgTeamResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Org User {user_id}
     - parameter userId: (path) The primary key of the OrgUser 
     - parameter body: (body) The *Org User* to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOrgUser(userId: String, body: OrgUserCreateRequest, completion: @escaping ((_ data: OrgUserResponse?, _ error: ErrorResponse?) -> Void)) {
        updateOrgUserWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Org User {user_id}
     - POST /orgs/user/update/{user_id}
     - Updates and returns the *Org User* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter userId: (path) The primary key of the OrgUser 
     - parameter body: (body) The *Org User* to update 
     - returns: RequestBuilder<OrgUserResponse> 
     */
    open class func updateOrgUserWithRequestBuilder(userId: String, body: OrgUserCreateRequest) -> RequestBuilder<OrgUserResponse> {
        var path = "/orgs/user/update/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
