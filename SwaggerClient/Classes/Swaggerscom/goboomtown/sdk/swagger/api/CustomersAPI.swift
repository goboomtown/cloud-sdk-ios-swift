//
// CustomersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CustomersAPI: APIBase {
    /**
     Check if an email address is in use by a Customer User
     - parameter email: (path) Email Address to check 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkCustomerUserEmail(email: String, completion: @escaping ((_ data: ExistsResponse?, _ error: ErrorResponse?) -> Void)) {
        checkCustomerUserEmailWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if an email address is in use by a Customer User
     - GET /customers/user_check
     - Returns whether a Customer User with the email address exists or not
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={ }}]
     - parameter email: (path) Email Address to check 
     - returns: RequestBuilder<ExistsResponse> 
     */
    open class func checkCustomerUserEmailWithRequestBuilder(email: String) -> RequestBuilder<ExistsResponse> {
        var path = "/customers/user_check"
        let emailPreEscape = "\(email)"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExistsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer Location by Issue Id
     - parameter issueId: (query) An Issue Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLocationLookupByIssueId(issueId: String, completion: @escaping ((_ data: CustomerLocationResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLocationLookupByIssueIdWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer Location by Issue Id
     - GET /customers/location/lookupByIssueId
     - Lookup a Customer Location by an Issue Id
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (query) An Issue Id 
     - returns: RequestBuilder<CustomerLocationResponse> 
     */
    open class func customerLocationLookupByIssueIdWithRequestBuilder(issueId: String) -> RequestBuilder<CustomerLocationResponse> {
        let path = "/customers/location/lookupByIssueId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "issueId": issueId
        ])

        let requestBuilder: RequestBuilder<CustomerLocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer Location byemail address
     - parameter email: (query) The Customer Location&#39;s email address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLocationLookupByUserEmail(email: String, completion: @escaping ((_ data: CustomerLocationResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLocationLookupByUserEmailWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer Location byemail address
     - GET /customers/location/lookupByEmail
     - Lookup a Location by the value of the email field
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter email: (query) The Customer Location&#39;s email address 
     - returns: RequestBuilder<CustomerLocationResponse> 
     */
    open class func customerLocationLookupByUserEmailWithRequestBuilder(email: String) -> RequestBuilder<CustomerLocationResponse> {
        let path = "/customers/location/lookupByEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "email": email
        ])

        let requestBuilder: RequestBuilder<CustomerLocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer Location by external_id
     - parameter externalId: (query) The Customer&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLocationsLookupByExternalId(externalId: String, completion: @escaping ((_ data: CustomerLocationResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLocationsLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer Location by external_id
     - GET /customers/location/lookupByExternalId
     - Lookup a Customer Location by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The Customer&#39;s external ID 
     - returns: RequestBuilder<CustomerLocationResponse> 
     */
    open class func customerLocationsLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<CustomerLocationResponse> {
        let path = "/customers/location/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<CustomerLocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer by their login info
     - parameter login: (query) The Customer&#39;s login name 
     - parameter password: (form) The Customer&#39;s login password 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLookup(login: String, password: String, completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLookupWithRequestBuilder(login: login, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer by their login info
     - GET /customers/lookup
     - Lookup a Customer by their username and password
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter login: (query) The Customer&#39;s login name 
     - parameter password: (form) The Customer&#39;s login password 
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func customerLookupWithRequestBuilder(login: String, password: String) -> RequestBuilder<CustomerResponse> {
        let path = "/customers/lookup"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "password": password
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "login": login
        ])

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer by external_id
     - parameter externalId: (query) The Customer&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLookupByExternalId(externalId: String, completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer by external_id
     - GET /customers/lookupByExternalId
     - Lookup a Customer by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The Customer&#39;s external ID 
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func customerLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<CustomerResponse> {
        let path = "/customers/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer by Issue Id
     - parameter issueId: (query) An Issue Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLookupByIssueId(issueId: String, completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLookupByIssueIdWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer by Issue Id
     - GET /customers/lookupByIssueId
     - Lookup a Customer by an Issue Id
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (query) An Issue Id 
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func customerLookupByIssueIdWithRequestBuilder(issueId: String) -> RequestBuilder<CustomerResponse> {
        let path = "/customers/lookupByIssueId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "issueId": issueId
        ])

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer by a User's Email
     - parameter customerUserEmail: (query) The Customer User&#39;s email address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLookupByUserEmail(customerUserEmail: String, completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLookupByUserEmailWithRequestBuilder(customerUserEmail: customerUserEmail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer by a User's Email
     - GET /customers/lookupByEmail
     - Lookup a Customer by a User Email
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerUserEmail: (query) The Customer User&#39;s email address 
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func customerLookupByUserEmailWithRequestBuilder(customerUserEmail: String) -> RequestBuilder<CustomerResponse> {
        let path = "/customers/lookupByEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customerUserEmail": customerUserEmail
        ])

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer by a User Id
     - parameter customerUserId: (query) The Customer User&#39;s Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerLookupByUserId(customerUserId: String, completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        customerLookupByUserIdWithRequestBuilder(customerUserId: customerUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer by a User Id
     - GET /customers/lookupById
     - Lookup a Customer by a User Id
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerUserId: (query) The Customer User&#39;s Id 
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func customerLookupByUserIdWithRequestBuilder(customerUserId: String) -> RequestBuilder<CustomerResponse> {
        let path = "/customers/lookupById"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customerUserId": customerUserId
        ])

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer User by Issue Id
     - parameter issueId: (query) An Issue Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerUserLookupByIssueId(issueId: String, completion: @escaping ((_ data: CustomerUserResponse?, _ error: ErrorResponse?) -> Void)) {
        customerUserLookupByIssueIdWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer User by Issue Id
     - GET /customers/users/lookupByIssueId
     - Lookup a `CustomersUsers` by an Issue Id
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (query) An Issue Id 
     - returns: RequestBuilder<CustomerUserResponse> 
     */
    open class func customerUserLookupByIssueIdWithRequestBuilder(issueId: String) -> RequestBuilder<CustomerUserResponse> {
        let path = "/customers/users/lookupByIssueId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "issueId": issueId
        ])

        let requestBuilder: RequestBuilder<CustomerUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer User by external_id
     - parameter externalId: (query) The Customer User&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerUsersLookupByExternalId(externalId: String, completion: @escaping ((_ data: CustomerUserResponse?, _ error: ErrorResponse?) -> Void)) {
        customerUsersLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer User by external_id
     - GET /customers/users/lookupByExternalId
     - Lookup a Customer User by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The Customer User&#39;s external ID 
     - returns: RequestBuilder<CustomerUserResponse> 
     */
    open class func customerUsersLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<CustomerUserResponse> {
        let path = "/customers/users/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<CustomerUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer User by a User's Email
     - parameter customerUserEmail: (query) The Customer User&#39;s email address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerUsersLookupByUserEmail(customerUserEmail: String, completion: @escaping ((_ data: CustomerUsersResponse?, _ error: ErrorResponse?) -> Void)) {
        customerUsersLookupByUserEmailWithRequestBuilder(customerUserEmail: customerUserEmail).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer User by a User's Email
     - GET /customers/users/lookupByEmail
     - Lookup a Customer User by a User Email
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerUserEmail: (query) The Customer User&#39;s email address 
     - returns: RequestBuilder<CustomerUsersResponse> 
     */
    open class func customerUsersLookupByUserEmailWithRequestBuilder(customerUserEmail: String) -> RequestBuilder<CustomerUsersResponse> {
        let path = "/customers/users/lookupByEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customerUserEmail": customerUserEmail
        ])

        let requestBuilder: RequestBuilder<CustomerUsersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a Customer
     - parameter customerId: (path) The primary key of the &#x60;Customer&#x60; 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomer(customerId: String, completion: @escaping ((_ data: CustomerResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerWithRequestBuilder(customerId: customerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a Customer
     - GET /customers/get/{customer_id}
     - Returns a `Customer` object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerId: (path) The primary key of the &#x60;Customer&#x60; 
     - returns: RequestBuilder<CustomerResponse> 
     */
    open class func getCustomerWithRequestBuilder(customerId: String) -> RequestBuilder<CustomerResponse> {
        var path = "/customers/get/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Users for a Customer Location
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter customerLocationId: (query) The primary key of the *Customer Location* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerLocationUsers(customerId: String, customerLocationId: String, completion: @escaping ((_ data: CustomerUserResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerLocationUsersWithRequestBuilder(customerId: customerId, customerLocationId: customerLocationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Users for a Customer Location
     - GET /customers/location/users/{customer_id}
     - Returns a paginated collection of *Customer User* objects related to a *Customer Location* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter customerLocationId: (query) The primary key of the *Customer Location* 
     - returns: RequestBuilder<CustomerUserResponse> 
     */
    open class func getCustomerLocationUsersWithRequestBuilder(customerId: String, customerLocationId: String) -> RequestBuilder<CustomerUserResponse> {
        var path = "/customers/location/users/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customer_location_id": customerLocationId
        ])

        let requestBuilder: RequestBuilder<CustomerUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Locations for a Customer
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter customerLocationId: (query) An optional customer_location_id to filter the results with (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerLocations(customerId: String, customerLocationId: String? = nil, completion: @escaping ((_ data: CustomerLocationResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerLocationsWithRequestBuilder(customerId: customerId, customerLocationId: customerLocationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Locations for a Customer
     - GET /customers/location/get/{customer_id}
     - Returns a paginated collection of *Customer Location* objects related to a *Customer* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter customerLocationId: (query) An optional customer_location_id to filter the results with (optional)
     - returns: RequestBuilder<CustomerLocationResponse> 
     */
    open class func getCustomerLocationsWithRequestBuilder(customerId: String, customerLocationId: String? = nil) -> RequestBuilder<CustomerLocationResponse> {
        var path = "/customers/location/get/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customer_location_id": customerLocationId
        ])

        let requestBuilder: RequestBuilder<CustomerLocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List available custom forms for locations
     - parameter orgTeamId: (query) An optional org_team_id to filter the results with (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerMetaCustomForms(orgTeamId: String? = nil, completion: @escaping ((_ data: CustomFormsResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerMetaCustomFormsWithRequestBuilder(orgTeamId: orgTeamId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List available custom forms for locations
     - GET /customers/meta/customForms
     - Returns a paginated collection of `CustomForm` objects that are associated with `CustomerLocation` objects. A Custom Form is a list of additional custom fields which can apply to all Customer Location objects. Custom Forms are created and managed using Relay and may be associated with a specific Org Team
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter orgTeamId: (query) An optional org_team_id to filter the results with (optional)
     - returns: RequestBuilder<CustomFormsResponse> 
     */
    open class func getCustomerMetaCustomFormsWithRequestBuilder(orgTeamId: String? = nil) -> RequestBuilder<CustomFormsResponse> {
        let path = "/customers/meta/customForms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "org_team_id": orgTeamId
        ])

        let requestBuilder: RequestBuilder<CustomFormsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Industry' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerMetaIndustries(completion: @escaping ((_ data: HashMapResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerMetaIndustriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Industry' dictionary for mapping keys to labels
     - GET /customers/meta/industries
     - Returns a dictionary for mapping 'Industry' keys to labels on `Customer` objects. Note that the actual return value might be an array, but it should be treated as a dictionary. (Provide array indexes as keys to API methods which require an Industry) 
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<HashMapResponse> 
     */
    open class func getCustomerMetaIndustriesWithRequestBuilder() -> RequestBuilder<HashMapResponse> {
        let path = "/customers/meta/industries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HashMapResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Status' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerMetaStatuses(completion: @escaping ((_ data: HashMapResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerMetaStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Status' dictionary for mapping keys to labels
     - GET /customers/meta/statuses
     - Returns a dictionary for mapping 'Status' keys to labels on `Customer` / `CustomerUser` objects. Note that the actual return value might be an array, but it should be treated as a dictionary. (Provide array indexes as keys to API methods which require a Status)
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<HashMapResponse> 
     */
    open class func getCustomerMetaStatusesWithRequestBuilder() -> RequestBuilder<HashMapResponse> {
        let path = "/customers/meta/statuses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HashMapResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of technology for a Customer
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter customerLocationId: (query) The primaru key of the *Customer Location* 
     - parameter customersTechnologyId: (query) An optional customers_technology_id to filter the results with (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerTechnology(customerId: String, customerLocationId: String, customersTechnologyId: String? = nil, completion: @escaping ((_ data: CustomerTechnologyResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerTechnologyWithRequestBuilder(customerId: customerId, customerLocationId: customerLocationId, customersTechnologyId: customersTechnologyId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of technology for a Customer
     - GET /customers/technology/get/{customer_id}
     - Returns a paginated collection of *CustomerTechnology* objects related to a *Customer Location* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter customerLocationId: (query) The primaru key of the *Customer Location* 
     - parameter customersTechnologyId: (query) An optional customers_technology_id to filter the results with (optional)
     - returns: RequestBuilder<CustomerTechnologyResponse> 
     */
    open class func getCustomerTechnologyWithRequestBuilder(customerId: String, customerLocationId: String, customersTechnologyId: String? = nil) -> RequestBuilder<CustomerTechnologyResponse> {
        var path = "/customers/technology/get/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "customer_location_id": customerLocationId,
            "customers_technology_id": customersTechnologyId
        ])

        let requestBuilder: RequestBuilder<CustomerTechnologyResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Users for a Customer
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter userId: (query) Optional user_id to filter the results with (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomerUsers(customerId: String, userId: String? = nil, completion: @escaping ((_ data: CustomerUserResponse?, _ error: ErrorResponse?) -> Void)) {
        getCustomerUsersWithRequestBuilder(customerId: customerId, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Users for a Customer
     - GET /customers/user/get/{customer_id}
     - Returns a paginated collection of *Customer User* objects related to a *Customer* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter customerId: (path) The primary key of the *Customer* 
     - parameter userId: (query) Optional user_id to filter the results with (optional)
     - returns: RequestBuilder<CustomerUserResponse> 
     */
    open class func getCustomerUsersWithRequestBuilder(customerId: String, userId: String? = nil) -> RequestBuilder<CustomerUserResponse> {
        var path = "/customers/user/get/{customer_id}"
        let customerIdPreEscape = "\(customerId)"
        let customerIdPostEscape = customerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customer_id}", with: customerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "user_id": userId
        ])

        let requestBuilder: RequestBuilder<CustomerUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create/update a Customer, Location, and User
     - parameter body: (body) The *Customer*, *Customer Location* and *Customer User* data to create/update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCustomer(body: CustomerCreateRequest, completion: @escaping ((_ data: CustomerCreateResponse?, _ error: ErrorResponse?) -> Void)) {
        putCustomerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create/update a Customer, Location, and User
     - POST /customers/put
     - Creates/updates a `Customer` object, `CustomerLocation` object, and `CustomerUser` object in a single atomic transaction.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body) The *Customer*, *Customer Location* and *Customer User* data to create/update 
     - returns: RequestBuilder<CustomerCreateResponse> 
     */
    open class func putCustomerWithRequestBuilder(body: CustomerCreateRequest) -> RequestBuilder<CustomerCreateResponse> {
        let path = "/customers/put"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomerCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create/update a Customer Location
     - parameter body: (body) The *Customer Location* data to create/update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCustomerLocation(body: CustomerLocationPutRequest, completion: @escaping ((_ data: CustomerCreateResponse?, _ error: ErrorResponse?) -> Void)) {
        putCustomerLocationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create/update a Customer Location
     - POST /customers/location/put
     - Creates/updates a `CustomerLocation` object
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body) The *Customer Location* data to create/update 
     - returns: RequestBuilder<CustomerCreateResponse> 
     */
    open class func putCustomerLocationWithRequestBuilder(body: CustomerLocationPutRequest) -> RequestBuilder<CustomerCreateResponse> {
        let path = "/customers/location/put"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomerCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create/update a Customer User
     - parameter body: (body) The *Customer User* data to create/update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putCustomerUsers(body: CustomerUserPutRequest, completion: @escaping ((_ data: CustomerCreateResponse?, _ error: ErrorResponse?) -> Void)) {
        putCustomerUsersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create/update a Customer User
     - POST /customers/user/put
     - Creates/updates a `CustomerUser` object
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body) The *Customer User* data to create/update 
     - returns: RequestBuilder<CustomerCreateResponse> 
     */
    open class func putCustomerUsersWithRequestBuilder(body: CustomerUserPutRequest) -> RequestBuilder<CustomerCreateResponse> {
        let path = "/customers/user/put"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomerCreateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset a Customer User's password
     - parameter login: (form) E-mail address of the Customer User&#39;s account 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetCustomerUserPassword(login: String, completion: @escaping ((_ data: CommonResponse?, _ error: ErrorResponse?) -> Void)) {
        resetCustomerUserPasswordWithRequestBuilder(login: login).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Reset a Customer User's password
     - POST /customers/password_reset
     - Reset a Customer User's password, a password reset email will be sent.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={
  "success" : true,
  "current_server_time" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter login: (form) E-mail address of the Customer User&#39;s account 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func resetCustomerUserPasswordWithRequestBuilder(login: String) -> RequestBuilder<CommonResponse> {
        let path = "/customers/password_reset"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "login": login
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Invite an individual (via SMS) to download the App
     - parameter smsNumber: (form) The SMS number to send the Invitation to. 
     - parameter orgTeamId: (form) Optional Org Team ID to use (Default team is used if no team ID is provided) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func smsInvite(smsNumber: String, orgTeamId: String? = nil, completion: @escaping ((_ data: SmsInviteResponse?, _ error: ErrorResponse?) -> Void)) {
        smsInviteWithRequestBuilder(smsNumber: smsNumber, orgTeamId: orgTeamId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Invite an individual (via SMS) to download the App
     - POST /customers/sms_invite
     - Sends an SMS to an individual (creating a new *Customer User* for that user, if none exists) with instructions for downloading the Connect app. Creates an *Issue* for this user. Returns *Invitation*, *Customer User* and *Issue* IDs. 
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={ }}]
     - parameter smsNumber: (form) The SMS number to send the Invitation to. 
     - parameter orgTeamId: (form) Optional Org Team ID to use (Default team is used if no team ID is provided) (optional)
     - returns: RequestBuilder<SmsInviteResponse> 
     */
    open class func smsInviteWithRequestBuilder(smsNumber: String, orgTeamId: String? = nil) -> RequestBuilder<SmsInviteResponse> {
        let path = "/customers/sms_invite"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "sms_number": smsNumber,
            "org_team_id": orgTeamId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsInviteResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
