//
// IssuesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class IssuesAPI: APIBase {
    /**
     Cancel an Issue for a Customer
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelIssue(issueId: String, completion: @escaping ((_ data: CommonResponse?, _ error: ErrorResponse?) -> Void)) {
        cancelIssueWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel an Issue for a Customer
     - POST /issues/cancel/{issue_id}
     - Transitions an *Issue* to a 'Canceled' status in the workflow.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={
  "success" : true,
  "current_server_time" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func cancelIssueWithRequestBuilder(issueId: String) -> RequestBuilder<CommonResponse> {
        var path = "/issues/cancel/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel an Issue appointment for a Customer
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelIssueSchedule(issueId: String, completion: @escaping ((_ data: CommonResponse?, _ error: ErrorResponse?) -> Void)) {
        cancelIssueScheduleWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel an Issue appointment for a Customer
     - POST /issues/cancel_schedule/{issue_id}
     - Transitions an *Issue* from 'Scheduled' to 'Scheduling' status in the workflow.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={
  "success" : true,
  "current_server_time" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func cancelIssueScheduleWithRequestBuilder(issueId: String) -> RequestBuilder<CommonResponse> {
        var path = "/issues/cancel_schedule/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add an entry to an Issue's log
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter notes: (form) Notes to log against the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createIssueLog(issueId: String, notes: String, completion: @escaping ((_ data: IssueLogsResponse?, _ error: ErrorResponse?) -> Void)) {
        createIssueLogWithRequestBuilder(issueId: issueId, notes: notes).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add an entry to an Issue's log
     - POST /issues/log/put/{issue_id}
     - Creates a new log entry related to an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter notes: (form) Notes to log against the *Issue* 
     - returns: RequestBuilder<IssueLogsResponse> 
     */
    open class func createIssueLogWithRequestBuilder(issueId: String, notes: String) -> RequestBuilder<IssueLogsResponse> {
        var path = "/issues/log/put/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "notes": notes
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueLogsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a file from the Issue's file list
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter fileId: (form) The primary key of the *Upload File* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIssueFile(issueId: String, fileId: String, completion: @escaping ((_ data: FilesResponse?, _ error: ErrorResponse?) -> Void)) {
        deleteIssueFileWithRequestBuilder(issueId: issueId, fileId: fileId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Removes a file from the Issue's file list
     - POST /issues/file/delete/{issue_id}
     - Removes an existing file entry related to an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter fileId: (form) The primary key of the *Upload File* 
     - returns: RequestBuilder<FilesResponse> 
     */
    open class func deleteIssueFileWithRequestBuilder(issueId: String, fileId: String) -> RequestBuilder<FilesResponse> {
        var path = "/issues/file/delete/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file_id": fileId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FilesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes log entry with id {issue_log_id} on issue {issue_id}
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter issueLogId: (form) The primary key of the *Issue Log* to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIssueLog(issueId: String, issueLogId: String, completion: @escaping ((_ data: IssueLogsResponse?, _ error: ErrorResponse?) -> Void)) {
        deleteIssueLogWithRequestBuilder(issueId: issueId, issueLogId: issueLogId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Removes log entry with id {issue_log_id} on issue {issue_id}
     - POST /issues/log/delete/{issue_id}
     - Removes an existing log entry related to an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter issueLogId: (form) The primary key of the *Issue Log* to update 
     - returns: RequestBuilder<IssueLogsResponse> 
     */
    open class func deleteIssueLogWithRequestBuilder(issueId: String, issueLogId: String) -> RequestBuilder<IssueLogsResponse> {
        var path = "/issues/log/delete/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "issue_log_id": issueLogId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueLogsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an Issue
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssue(issueId: String, completion: @escaping ((_ data: IssueResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an Issue
     - GET /issues/get/{issue_id}
     - Returns an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<IssueResponse> 
     */
    open class func getIssueWithRequestBuilder(issueId: String) -> RequestBuilder<IssueResponse> {
        var path = "/issues/get/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves a chat history for a closed issue with issue id {issue_id}
     - parameter issueId: (path) The issue id associated with the *Chat* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueChatHistory(issueId: String, completion: @escaping ((_ data: IssueChatHistoryResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueChatHistoryWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves a chat history for a closed issue with issue id {issue_id}
     - GET /issues/chat/history/{issue_id}
     - Returns a collection of Chat Items with their Transcripts.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The issue id associated with the *Chat* 
     - returns: RequestBuilder<IssueChatHistoryResponse> 
     */
    open class func getIssueChatHistoryWithRequestBuilder(issueId: String) -> RequestBuilder<IssueChatHistoryResponse> {
        var path = "/issues/chat/history/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueChatHistoryResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Return a list of files related to the Issue
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueFiles(issueId: String, completion: @escaping ((_ data: FilesResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueFilesWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Return a list of files related to the Issue
     - GET /issues/files/{issue_id}
     - Returns a list of files related to an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<FilesResponse> 
     */
    open class func getIssueFilesWithRequestBuilder(issueId: String) -> RequestBuilder<FilesResponse> {
        var path = "/issues/files/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FilesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of all Issue changes
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueLogs(issueId: String, completion: @escaping ((_ data: IssueLogsResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueLogsWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of all Issue changes
     - GET /issues/log/history/{issue_id}
     - Returns a paginated collection of all changes for an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<IssueLogsResponse> 
     */
    open class func getIssueLogsWithRequestBuilder(issueId: String) -> RequestBuilder<IssueLogsResponse> {
        var path = "/issues/log/history/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueLogsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Category' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueMetaCategories(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueMetaCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Category' dictionary for mapping keys to labels
     - GET /issues/meta/categories
     - Returns a dictionary for mapping 'Category' keys to labels on *Issue* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getIssueMetaCategoriesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/issues/meta/categories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Tag' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueMetaFileTags(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueMetaFileTagsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Tag' dictionary for mapping keys to labels
     - GET /issues/meta/file_tags
     - Returns a dictionary for mapping 'Tag' keys to labels on *Issue File* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getIssueMetaFileTagsWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/issues/meta/file_tags"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Job Status' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueMetaJobStatuses(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueMetaJobStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Job Status' dictionary for mapping keys to labels
     - GET /issues/meta/jobs
     - Returns a dictionary for mapping 'Job Status' keys to labels on *Issue* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getIssueMetaJobStatusesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/issues/meta/jobs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Resolution' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueMetaResolutions(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueMetaResolutionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Resolution' dictionary for mapping keys to labels
     - GET /issues/meta/resolutions
     - Returns a dictionary for mapping 'Resolution' keys to labels on *Issue* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getIssueMetaResolutionsWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/issues/meta/resolutions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Status' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueMetaStatuses(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueMetaStatusesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Status' dictionary for mapping keys to labels
     - GET /issues/meta/statuses
     - Returns a dictionary for mapping 'Status' keys to labels on *Issue* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getIssueMetaStatusesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/issues/meta/statuses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get 'Type' dictionary for mapping keys to labels
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueMetaTypes(completion: @escaping ((_ data: EnumerationItemResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueMetaTypesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get 'Type' dictionary for mapping keys to labels
     - GET /issues/meta/types
     - Returns a dictionary for mapping 'Type' keys to labels on *Issue* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<EnumerationItemResponse> 
     */
    open class func getIssueMetaTypesWithRequestBuilder() -> RequestBuilder<EnumerationItemResponse> {
        let path = "/issues/meta/types"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EnumerationItemResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Issue status changes
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssueStatusHistory(issueId: String, completion: @escaping ((_ data: IssueStatusesResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssueStatusHistoryWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Issue status changes
     - GET /issues/status/history/{issue_id}
     - Returns a paginated collection of status changes for an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<IssueStatusesResponse> 
     */
    open class func getIssueStatusHistoryWithRequestBuilder(issueId: String) -> RequestBuilder<IssueStatusesResponse> {
        var path = "/issues/status/history/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueStatusesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a collection of Issues
     - parameter limit: (query) Pagination result limit (defaults to 10) (optional)
     - parameter start: (query) Pagination starting result number (defaults to 0) (optional)
     - parameter customerId: (query) Optionally limit result to this {customer_id} (optional)
     - parameter customersUsersId: (query) Optionally limit result to this {customers_users_id} (optional)
     - parameter customerLocationId: (query) Optionally limit result to this {customer_location_id} (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssues(limit: Int32? = nil, start: Int32? = nil, customerId: String? = nil, customersUsersId: String? = nil, customerLocationId: String? = nil, completion: @escaping ((_ data: IssueResponse?, _ error: ErrorResponse?) -> Void)) {
        getIssuesWithRequestBuilder(limit: limit, start: start, customerId: customerId, customersUsersId: customersUsersId, customerLocationId: customerLocationId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a collection of Issues
     - GET /issues/get
     - Returns a paginated collection of *Issue* objects.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter limit: (query) Pagination result limit (defaults to 10) (optional)
     - parameter start: (query) Pagination starting result number (defaults to 0) (optional)
     - parameter customerId: (query) Optionally limit result to this {customer_id} (optional)
     - parameter customersUsersId: (query) Optionally limit result to this {customers_users_id} (optional)
     - parameter customerLocationId: (query) Optionally limit result to this {customer_location_id} (optional)
     - returns: RequestBuilder<IssueResponse> 
     */
    open class func getIssuesWithRequestBuilder(limit: Int32? = nil, start: Int32? = nil, customerId: String? = nil, customersUsersId: String? = nil, customerLocationId: String? = nil) -> RequestBuilder<IssueResponse> {
        let path = "/issues/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "customer_id": customerId,
            "customers_users_id": customersUsersId,
            "customer_location_id": customerLocationId
        ])

        let requestBuilder: RequestBuilder<IssueResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an Issue by external_id
     - parameter externalId: (query) The Customer&#39;s external ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueLookupByExternalId(externalId: String, completion: @escaping ((_ data: IssueResponse?, _ error: ErrorResponse?) -> Void)) {
        issueLookupByExternalIdWithRequestBuilder(externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an Issue by external_id
     - GET /issues/lookupByExternalId
     - Lookup an `Issues` object by the external_id field, corrolating to the ID in the callee's system
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter externalId: (query) The Customer&#39;s external ID 
     - returns: RequestBuilder<IssueResponse> 
     */
    open class func issueLookupByExternalIdWithRequestBuilder(externalId: String) -> RequestBuilder<IssueResponse> {
        let path = "/issues/lookupByExternalId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "external_id": externalId
        ])

        let requestBuilder: RequestBuilder<IssueResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create/update an Issue for a Customer
     - parameter issues: (body) The *Issue* to create (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIssue(issues: IssueCreateRequest? = nil, completion: @escaping ((_ data: IssueResponse?, _ error: ErrorResponse?) -> Void)) {
        putIssueWithRequestBuilder(issues: issues).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create/update an Issue for a Customer
     - POST /issues/put
     - Creates an *Issue* object (or updates one if the ID is provided) related to a *Customer* object. To create a new object, supply the data for the new object in the request body with the `id` property set to `NULL` or omitted. To **update** an existing entry, ensure the ID of the object to be updated is set in the `id` parameter of the request, and provide any other fields to update.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter issues: (body) The *Issue* to create (optional)
     - returns: RequestBuilder<IssueResponse> 
     */
    open class func putIssueWithRequestBuilder(issues: IssueCreateRequest? = nil) -> RequestBuilder<IssueResponse> {
        let path = "/issues/put"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = issues?.encodeToJSON()

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Resolve an Issue for a Customer
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resolveIssue(issueId: String, completion: @escaping ((_ data: CommonResponse?, _ error: ErrorResponse?) -> Void)) {
        resolveIssueWithRequestBuilder(issueId: issueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Resolve an Issue for a Customer
     - POST /issues/resolve/{issue_id}
     - Transitions an *Issue* to a 'Resolved' status in the workflow.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={
  "success" : true,
  "current_server_time" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func resolveIssueWithRequestBuilder(issueId: String) -> RequestBuilder<CommonResponse> {
        var path = "/issues/resolve/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Schedule an Issue for a Customer
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter scheduledTime: (query) The date-time at which to schedule the *Issue* 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scheduleIssue(issueId: String, scheduledTime: String, completion: @escaping ((_ data: CommonResponse?, _ error: ErrorResponse?) -> Void)) {
        scheduleIssueWithRequestBuilder(issueId: issueId, scheduledTime: scheduledTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Schedule an Issue for a Customer
     - POST /issues/schedule/{issue_id}
     - Transitions an *Issue* from 'Scheduling' to 'Scheduled' status in the workflow.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example={
  "success" : true,
  "current_server_time" : "2000-01-23T04:56:07.000+00:00"
}}]
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter scheduledTime: (query) The date-time at which to schedule the *Issue* 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func scheduleIssueWithRequestBuilder(issueId: String, scheduledTime: String) -> RequestBuilder<CommonResponse> {
        var path = "/issues/schedule/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "scheduled_time": scheduledTime
        ])

        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a file to the Issue's file list
     - parameter file: (form) The uploaded file data 
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter fileTag: (query) The file tag of the file being uploaded 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadIssueFile(file: URL, issueId: String, fileTag: String, completion: @escaping ((_ data: FilesResponse?, _ error: ErrorResponse?) -> Void)) {
        uploadIssueFileWithRequestBuilder(file: file, issueId: issueId, fileTag: fileTag).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a file to the Issue's file list
     - POST /issues/file/upload/{issue_id}
     - Uploads a new file entry related to an *Issue* object.
     - API Key:
       - type: apiKey X-Boomtown-Date 
       - name: X-Boomtown-Date     - API Key:
       - type: apiKey X-Boomtown-Signature 
       - name: X-Boomtown-Signature     - API Key:
       - type: apiKey X-Boomtown-Token 
       - name: X-Boomtown-Token
     - examples: [{contentType=application/json, example=""}]
     - parameter file: (form) The uploaded file data 
     - parameter issueId: (path) The primary key of the *Issue* 
     - parameter fileTag: (query) The file tag of the file being uploaded 
     - returns: RequestBuilder<FilesResponse> 
     */
    open class func uploadIssueFileWithRequestBuilder(file: URL, issueId: String, fileTag: String) -> RequestBuilder<FilesResponse> {
        var path = "/issues/file/upload/{issue_id}"
        let issueIdPreEscape = "\(issueId)"
        let issueIdPostEscape = issueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{issue_id}", with: issueIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "file_tag": fileTag
        ])

        let requestBuilder: RequestBuilder<FilesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
